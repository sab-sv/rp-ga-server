
GADEPS		?= $(HOME)/myprog/gaminganywhere/deps.udoo
MACHINE		= $(shell uname -m)
PARALLEL_MAKE	= -j5
PACKAGES	= sdl2 lame opus ogg vorbis theora vpx x264 ffmpeg live555

TBZUNPACK	= tar xjf
TGZUNPACK	= tar xzf

TARGET		= arm-linux
TARGET_VPX	= armv7-linux-gcc

include Makefile.packages

# freescale cross compiler
CCPREFIX	= arm-fsl-linux-gnueabi-
CC		= $(CCPREFIX)gcc
CXX		= $(CCPREFIX)g++

UDOO_CFLAGS	= -D__BIG_ENDIAN__

CROSSCOMPILE = --host=$(TARGET) CC=$(CC) CXX=$(CXX) \
	CFLAGS="$(UDOO_CFLAGS) -I$(GADEPS)/include" \
	CPPFLAGS="$(UDOO_CFLAGS) -I$(GADEPS)/include" \
	LDFLAGS="-L$(GADEPS)/lib"

.PHONY: ffmpeg

all: pkg-config $(PACKAGES)

pkg-config:
	mkdir -p $(GADEPS)/bin
	ln -sf /usr/bin/pkg-config $(GADEPS)/bin/$(CCPREFIX)pkg-config

sdl2:
	$(TGZUNPACK) $(SDL2)
	mkdir -p $(SDL2DIR)/mybuild
	cd $(SDL2DIR)/mybuild; CFLAGS=$(UDOO_CFLAGS) ../configure --prefix=$(GADEPS) --with-pic $(CROSSCOMPILE) \
		--disable-pulseaudio --disable-esd
	make -C $(SDL2DIR)/mybuild $(PARALLEL_MAKE)
	make -C $(SDL2DIR)/mybuild install
	rm -rf $(SDL2DIR)

sdl2_ttf:
	# XXX: we need freetype
	$(TGZUNPACK) $(SDL2_TTF)
	mkdir -p $(SDL2_TTFDIR)/mybuild
	cd $(SDL2_TTFDIR)/mybuild; ../configure --prefix=$(GADEPS) --with-sdl-prefix=$(GADEPS) $(CROSSCOMPILE)
	make -C $(SDL2_TTFDIR)/mybuild $(PARALLEL_MAKE)
	make -C $(SDL2_TTFDIR)/mybuild install
	rm -rf $(SDL2_TTFDIR)

#### note: yasm only support x86/x86_64 platform
yasm:
	$(TGZUNPACK) $(YASM)
	cd $(YASMDIR); ./configure --prefix=$(GADEPS)
	make -C $(YASMDIR) $(PARALLEL_MAKE)
	make -C $(YASMDIR) install
	rm -rf $(YASMDIR)

lame:
	$(TGZUNPACK) $(LAME)
	cd $(LAMEDIR); ./configure --prefix=$(GADEPS) $(CROSSCOMPILE)
	make -C $(LAMEDIR) $(PARALLEL_MAKE)
	make -C $(LAMEDIR) install
	rm -rf $(LAMEDIR)

opus:
	$(TGZUNPACK) $(OPUS)
	cd $(OPUSDIR); ./configure --prefix=$(GADEPS) $(CROSSCOMPILE) --with-pic
	make -C $(OPUSDIR) $(PARALLEL_MAKE)
	make -C $(OPUSDIR) install
	rm -rf $(OPUSDIR)

ogg:
	$(TGZUNPACK) $(OGG)
	cd $(OGGDIR); ./configure --prefix=$(GADEPS) $(CROSSCOMPILE)
	make -C $(OGGDIR) $(PARALLEL_MAKE)
	make -C $(OGGDIR) install
	rm -rf $(OGGDIR)

vorbis:
	$(TGZUNPACK) $(VORBIS)
	cd $(VORBISDIR); ./configure --prefix=$(GADEPS) --build=$(MACHINE) $(CROSSCOMPILE)
	make -C $(VORBISDIR) $(PARALLEL_MAKE)
	make -C $(VORBISDIR) install
	rm -rf $(VORBISDIR)

theora:
	$(TBZUNPACK) $(THEORA)
	# disable PKG_CONFIG because it detects local png library
	cd $(THEORADIR); ./configure --prefix=$(GADEPS) \
		--enable-static --disable-shared PKG_CONFIG="" \
		$(CROSSCOMPILE)
	make -C $(THEORADIR) $(PARALLEL_MAKE)
	make -C $(THEORADIR) install
	rm -rf $(THEORADIR)

vpx:
	$(TBZUNPACK) $(VPX)
	cd $(VPXDIR); ./configure --prefix=$(GADEPS) --disable-examples \
		--target=$(TARGET_VPX) \
		--disable-runtime-cpu-detect \
		--enable-pic
	make -C $(VPXDIR) $(PARALLEL_MAKE)
	make -C $(VPXDIR) install
	rm -rf $(VPXDIR)

x264:
	$(TBZUNPACK) $(X264)
	#
	cd $(X264DIR); ./configure --prefix=$(GADEPS) --enable-shared \
		--enable-pic \
		--cross-prefix=$(CCPREFIX) --host=$(TARGET) \
		--extra-cflags="$(UDOO_CFLAGS) -I$(GADEPS)/include" \
		--extra-ldflags="$(UDOO_LDFLAGS) -L$(GADEPS)/lib"
	make -C $(X264DIR) $(PARALLEL_MAKE)
	make -C $(X264DIR) install
	rm -rf $(X264DIR)

ffmpeg:
	$(TBZUNPACK) $(FFMPEG)
	#
	cd $(FFMPEGDIR); ./configure --prefix=$(GADEPS) \
		--enable-pic \
		--enable-libmp3lame \
		--enable-libtheora --enable-libvorbis \
		--enable-libx264 --enable-libvpx \
		--enable-libopus \
		--enable-gpl --enable-nonfree --disable-outdev=sdl \
		--disable-doc \
		--enable-cross-compile --cross-prefix=$(CCPREFIX) \
		--target-os=linux --arch=armv7 --cpu=cortex-a8 \
		--enable-asm --enable-neon --disable-runtime-cpudetect \
		--extra-cflags="$(UDOO_CFLAGS) -I$(GADEPS)/include" \
		--extra-cxxflags="$(UDOO_CFLAGS) -I$(GADEPS)/include"\
		--extra-ldflags="$(UDOO_LDFLAGS) -L$(GADEPS)/lib"
		#--extra-ldflags="$(UDOO_LDFLAGS) -L$(GADEPS)/lib -Wl,--allow-shlib-undefined -Wl,-rpath-link=$(GADEPS)/lib"
	make -C $(FFMPEGDIR) $(PARALLEL_MAKE)
	make -C $(FFMPEGDIR) install
	rm -rf $(FFMPEGDIR)

#		--enable-libstagefright-h264 \
#		--disable-armv5te --disable-armv6 --disable-armv6t2 \

live555:
	$(TGZUNPACK) $(LIVE555)
	cp patches/udoo-live555-config.udoo $(LIVE555DIR)/config.udoo
	cd $(LIVE555DIR); cat ../patches/live555-* | patch -p1 
	cd $(LIVE555DIR); ./genMakefiles udoo
	make -C $(LIVE555DIR) $(PARALLEL_MAKE)
	-mkdir -p $(GADEPS)/lib
	find $(LIVE555DIR) -name '*.a' -exec cp -f {} $(GADEPS)/lib \;
	-mkdir -p $(GADEPS)/include/live555
	find $(LIVE555DIR) -name '*.hh' -exec cp -f {} $(GADEPS)/include/live555 \;
	cp -f $(LIVE555DIR)/groupsock/include/NetCommon.h $(GADEPS)/include/live555
	rm -rf $(LIVE555DIR)

